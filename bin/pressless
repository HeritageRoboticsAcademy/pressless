#!/usr/bin/env node
'use strict';

const asciify = require('asciify');
const async = require('async');
const aws = require('aws-sdk');
const dns = require('dns');
const DSNParser = require('dsn-parser');
const exec = require('child_process').exec;
const fs = require('fs');
const fse = require('fs-extra');
const fstream = require('fstream');
const os = require('os');
const path = require('path');
const program = require('commander');
const request = require('request');
const shell = require('shelljs');
const tarball = require('tarball-extract');
const tld = require('tldjs');
const unzip = require('unzip');
const util = require('util');

const ServerlessCustomDomain = require(path.resolve(path.dirname(__dirname),'./lib/serverless-domain-manager'));
const awsProvider = {
    aws: {
        getCredentials: () => {
            return {
                accessKeyId: aws.config.credentials.accessKeyId,
                secretAccessKey: aws.config.credentials.secretAccessKey,
                sessionToken: aws.config.credentials.sessionToken,
                region: aws.config.region || 'us-east-1'
            };
        }
    }
};

function getDomain() {
    const serverlessYml = fs.readFileSync('.pressless/serverless.yml');
    var matches = serverlessYml.toString().match(/domainName: (.*?)\n/);
    if (matches && matches[1]) {
        return matches[1];
    } else {
        console.log('Pressless: Unable to determine primary domain for project.');
        process.exit(1);
    }
}

function getWebsiteBucket() {
    const serverlessYml = fs.readFileSync('.pressless/serverless.yml');
    var matches = serverlessYml.toString().match(/websiteBucket: (.*?)\n/);
    if (matches && matches[1]) {
        return matches[1];
    } else {
        console.log('Pressless: Unable to determine website bucket for project.');
        process.exit(1);
    }
}

function getLoggingBucket() {
    const serverlessYml = fs.readFileSync('.pressless/serverless.yml');
    var matches = serverlessYml.toString().match(/loggingBucket: (.*?)\n/);
    if (matches && matches[1]) {
        return matches[1];
    } else {
        console.log('Pressless: Unable to determine logging bucket for project.');
        process.exit(1);
    }
}

program
  .command('setup <domain> <website_bucket>')
  .description('Setup pressless configuration and install dependencies')
  .option("-c, --certificate <certificate>", "AWS ACM certificate name to use")
  .option("-d, --dsn <dsn>", "(optional) Data source name [mysql+ssl://user:password@host:port/database]")
  .action(function(domain, website_bucket, options) {
    // look for wp-config.php
    if (!fs.existsSync('wp-config.php')) {
        return console.log('Pressless: Unable to find a valid Wordpress installation.  Please run pressless inside your Wordpress directory.');
    }
 
    if (domain.toLowerCase() == website_bucket.toLowerCase()) {
        return console.log('Pressless: <domain> and <website_bucket> must be different.');
    }
 
    if (!tld.isValid(domain.toLowerCase())) {
        return console.log('Pressless: ' + domain + ' is not a valid domain.');
    }

    if (!tld.isValid(website_bucket.toLowerCase())) {
        return console.log('Pressless: ' + website_bucket + ' is not a valid domain.');
    }

    if (!tld.isValid(options.certificate)) {
        return console.log('Pressless: ' + options.certificate + ' is not a valid certificate name.');
    }

    if (options.dsn) {
        var dsn = new DSNParser(options.dsn);
        if (!dsn.get('host') || !dsn.get('user') || !dsn.get('database')) {
            return console.log('Pressless: ' + options.dsn + ' is not a DSN!');
        }     
    }

    console.log('Pressless: Setting up...');

    domain = domain.toLowerCase();
    website_bucket = website_bucket.toLowerCase();
    const name = domain.replace(/[\.\_\']/g, '-').substring(0, domain.length - (options.region||'us-east-1').length - '-------lambdaRole'.length);  // created iam role must be <= 64 chars
    const loggingBucket = website_bucket + '-logs';

    const dotenv = `PRESSLESS_DOMAIN=${domain}
PRESSLESS_S3_WEBSITE_BUCKET=${website_bucket}
PRESSLESS_S3_LOGGING_BUCKET=${loggingBucket}
PRESSLESS_DB_SSL=${dsn.get('driver').indexOf('+ssl')?'true':'false'}
${dsn.get('host')?'PRESSLESS_DB_HOST='+dsn.get('host'):''}
${dsn.get('user')?'PRESSLESS_DB_USER='+dsn.get('user'):''}
${dsn.get('password')?'PRESSLESS_DB_PASSWORD='+dsn.get('password'):''}
${dsn.get('database')?'PRESSLESS_DB_NAME='+dsn.get('database'):''}`;

    const packageJson = `{
  "name": "${name}",
  "dependencies": {
    "binary-case": "^1.1.3",
    "dotenv": "^4.0.0",
    "serverless": "^1.0.0",
    "serverless-domain-manager": "^1.1.0",
    "serverless-apigw-binary": "^0.3.4"
  }
}`;

    const serverlessYml = `service: pl-${name}
provider:
  name: aws
  runtime: nodejs6.10
  deploymentBucket:
    name: pressless-deploys-${website_bucket}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
      Resource:
        - 'arn:aws:s3:::pressless-deploys-${website_bucket}'
    - Effect: 'Allow'
      Action:
        - 's3:CreateBucket'
      Resource:
        - 'arn:aws:s3:::*'
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        - 'arn:aws:s3:::${loggingBucket}'
        - 'arn:aws:s3:::${loggingBucket}/*'
        - 'arn:aws:s3:::${website_bucket}'
        - 'arn:aws:s3:::${website_bucket}/*'
    - Effect: 'Allow'
      Action:
        - 'rds-db:connect'
      Resource:
        - 'arn:aws:rds-db:*:*:dbuser:db-*/${dsn.get('user')||'pressless-rds'}'

package:
  exclude:
    - '*'
    - '**'
  include:
    - .env
    - handler.js
    - handler.php
    - aws.phar
    - node_modules/binary-case/**
    - node_modules/dotenv/**
    - php
    - wordpress/**
    - Evolution.php
    - lib/**
    - vendor/**
    - web/**

plugins:
  - serverless-domain-manager
  - serverless-apigw-binary

custom:
  pressless:
    loggingBucket: ${loggingBucket}
    websiteBucket: ${website_bucket}
  customDomain:
    basePath: (none)
    domainName: ${domain}
    stage: \${opt:stage}
    certificateName: '${options.certificate}'
  apigwBinary:
    types: # max 25 allowed
      - 'application/octet-stream'
      - 'application/pdf'
      - 'application/x-7z-compressed'
      - 'application/x-bzip'
      - 'application/x-bzip2'
      - 'application/x-rar-compressed'
      - 'application/x-tar'
      - 'application/zip'
      - 'audio/aac'
      - 'audio/ogg'
      - 'audio/webm'
      - 'audio/x-wav'
      - 'font/ttf'
      - 'font/woff'
      - 'font/woff2'
      - 'image/gif'
      - 'image/jpeg'
      - 'image/png'
      - 'image/svg+xml'
      - 'image/tiff'
      - 'image/webp'
      - 'image/*'
      - 'video/mpeg'
      - 'video/ogg'
      - 'video/webm' 

functions:
  ${name}:
    handler: handler.handle
    cors: true
    events:
      - http: ANY /
      - http: ANY {proxy+}
    timeout: 300`;

    // check for existance of ACM certificate, otherwise request one
    const slsDomainManager = new ServerlessCustomDomain({cli: {log: console.log}, providers: awsProvider, service: {provider: {region: 'us-east-1'}, custom: {customDomain: {domainName: domain, certificateName: options.certificate}}}});
    slsDomainManager.initializeVariables();
    try {
        slsDomainManager.getCertArn()
    } catch (e) {
        console.log('Pressless: certificate ' + options.certificate + ' does not exist, requesting...');

        var params = {
            DomainName: options.certificate,
            DomainValidationOptions: [
                {
                DomainName: options.certificate,
                ValidationDomain: tld.getDomain(options.certificate)
                }
            ],
            IdempotencyToken: options.certificate,

        };
        new aws.ACM({region: 'us-east-1'}).requestCertificate(params, function(err, data) {
            if (err) console.log('Pressless: Error requesting certificate for ' + options.certificate + ': ', err);
            else console.log('Pressless: a validation email has been sent to the administrators of ' + tld.getDomain(options.certificate) + ' for approval.  Once approved, the certificate will be issued.');
        });
    }

    fse.mkdirsSync('.pressless');
    fs.writeFileSync('.pressless/.env', dotenv);
    fs.writeFileSync('.pressless/package.json', packageJson);
    fs.writeFileSync('.pressless/serverless.yml', serverlessYml);

    shell.cd('.pressless');

    console.log('Pressless: Installing dependencies...');
    var npmInstall = shell.exec('npm install', {silent: true}).stdout;
    fse.copySync(path.resolve(path.dirname(__dirname),'./lib/serverless-domain-manager.js'), 'node_modules/serverless-domain-manager/index.js');

    console.log(`Pressless: Creating s3 bucket for serverless deployment: pressless-deploys-${website_bucket}...`);
    new aws.S3().createBucket({Bucket: `pressless-deploys-${website_bucket}`}).promise().catch((err) => {
        console.log('Pressless: Unable to create s3 bucket for serverless deployment:', err);
        process.exit(1);
    });

    console.log(`Pressless: Creating custom AWS ApiGateway domain: ${domain}...`);
    slsDomainManager.getDomain().then((data) => {
        console.log('Pressless: Custom AWS ApiGateway domain already exists.');
        console.log('Pressless: Setup complete.');
    })
    .catch((err) => {
        slsDomainManager.createDomain().then(() => {
            console.log('Pressless: Setup complete.');
        })
        .catch((err) => {
            console.log('Pressless: ', err);
        });
    });
}); 

program
  .command('domain')
  .description('Create AWS ApiGateway custom domain')
  .action(function(options) {
    if (!fs.existsSync('.pressless/serverless.yml')) {
        return console.log('Pressless: You must first call "pressless setup".');
    }

    const domain = getDomain();
    console.log(`Pressless: Creating custom AWS ApiGateway domain: ${domain}...`);
    const slsDomainManager = new ServerlessCustomDomain({cli: {log: console.log}, providers: awsProvider, service: {provider: {region: 'us-east-1'}, custom: {customDomain: {domainName: getDomain()}}}});
    slsDomainManager.initializeVariables();
    slsDomainManager.getDomain().then((data) => {
        console.log('Pressless: Custom AWS ApiGateway domain already exists.');
    })
    .catch((err) => {
        slsDomainManager.createDomain().then(() => {
            console.log('Pressless: Domain successfully created.');
        })
        .catch((err) => {
            console.log('Pressless: ', err);
        });
    });
}); 

program
  .command('copydb <dsn>')
  .description('Copy database')
  .action(function(dsn, options) {
    // look for wp-config.php
    if (!fs.existsSync('wp-config.php')) {
        return console.log('Pressless: Unable to find a valid Wordpress installation.  Please run pressless inside your Wordpress directory.');
    }

    if (!shell.which('mysql') || !shell.which('mysqldump')) {
        return console.log('Pressless: mysql and mysqldump are required but not found.');
    }

    var dsn = new DSNParser(dsn);
    if (!dsn.get('host') || !dsn.get('user') || !dsn.get('password') || !dsn.get('database')) {
        return console.log('Pressless: Invalid DSN!');
    }     

    console.log('Pressless: Dumping database...');

    var fromDatabase = {};
    var wpConfig = fs.readFileSync('wp-config.php');
    var matches = wpConfig.toString().match(/define\('DB_USER', '(.*?)'/);
    if (matches && matches[1]) { fromDatabase.user = matches[1]; }
    var matches = wpConfig.toString().match(/define\('DB_PASSWORD', '(.*?)'/);
    if (matches && matches[1]) { fromDatabase.password = matches[1]; }
    var matches = wpConfig.toString().match(/define\('DB_HOST', '(.*?)'/);
    if (matches && matches[1]) { fromDatabase.host = matches[1]; }    
    var matches = wpConfig.toString().match(/define\('DB_NAME', '(.*?)'/);
    if (matches && matches[1]) { 
        fromDatabase.database = matches[1]; 
    } else {
        var matches = wpConfig.toString().match(/define\('DB_NAME', Evolution::getDbName\('(.*?)'/);
        if (matches && matches[1]) { fromDatabase.database = matches[1] + '_production'; }    
    }

    if (!fromDatabase.host || !fromDatabase.user || !fromDatabase.database) {
        return console.log('Pressless: Missing database config from wp-config.php!');
    } 

    const dumpSqlFileName = os.tmpdir() + '/pressless' + new Date().getTime() + '.sql';
    if (!fs.existsSync(path.dirname(dumpSqlFileName))) {
        return console.log('Pressless: Database dump path "' + dumpSqlFileName + '" doesn\'t exist!');
    }

    var dumpCommand = util.format('mysqldump --skip-add-drop-table -h %s -u %s -p\'%s\' --databases %s >%s', fromDatabase.host, fromDatabase.user, fromDatabase.password, fromDatabase.database, dumpSqlFileName);
    shell.exec(dumpCommand, function (code, stdout, stderr) {
        if (code !== 0) {
            return console.log('Pressless: Error dumping database!', stderr);
        }

        // modify create database and use database commands and replace with new database
        shell.sed('-i', '`' + fromDatabase.database + '`', '`' + dsn.get('database') + '`', dumpSqlFileName);

        console.log('Pressless: Restoring database...');
        var restoreCommand = util.format('mysql -h %s -u %s -p\'%s\' <%s', dsn.get('host'), dsn.get('user'), dsn.get('password'), dumpSqlFileName);
        shell.exec(restoreCommand, function (code, stdout, stderr) {
            fs.unlinkSync(dumpSqlFileName);

            if (code !== 0) {
                return console.log('Pressless: Error copying database!', stderr);
            }

            console.log('Pressless: Database successfully copied.')
        });
    });
}); 

program
  .command('deploy')
  .description('Deploy Wordpress via Serverless')
  .option("-e, --env <env>", "Environment to use (defaults to 'O')")
  .option("-r, --region <region>", "Region to use (defaults to 'us-east-1')")
  .option("-v, --verbose", "Show events as they occur")
  .action(function(options) {
    if (!fs.existsSync('.pressless/serverless.yml')) {
        return console.log('Pressless: You must first call "pressless setup".');
    } else {
        require('dotenv').config({path: '.pressless/.env'})
    }

    const domain = getDomain();
    const websiteBucket = getWebsiteBucket();
    const loggingBucket = getLoggingBucket();
    const pwd = shell.pwd().toString();
    const region = options.region || 'us-east-1';
    const stage = options.env || 'O';  // default stage must be a string since serverless will upcase it

    if (!stage || stage == '_' || !/^[A-Za-z0-9]+$/.test(stage) || /^\d+$/.test(stage)) {
        return console.log('Pressless: Environemnt "' + stage + '" is not valid.  Only allows "a-zA-Z0-9_", must be a string (not only numbers) and must not be "_".');
    }

    // support for Evolution (https://github.com/evolution/wordpress)
    var wpConfig = fs.readFileSync('wp-config.php').toString();
    const isEvolution = (wpConfig.indexOf('Evolution.php') > 0 && fs.existsSync('../Evolution.php')) ? true : false;    
 
    try { fs.unlinkSync(os.tmpdir() + '/wordpress_latest.tar.gz'); } catch (e) {}
    console.log('Pressless: Downloading latest Wordpress release to ' + os.tmpdir() + '...');
    tarball.extractTarballDownload('https://wordpress.org/latest.tar.gz', os.tmpdir() + '/wordpress_latest.tar.gz', '.pressless', {}, function(err, result) {
        if (err) {
            console.log(err, result); 
            return;
        }

        // remove archive
        fs.unlinkSync(os.tmpdir() + '/wordpress_latest.tar.gz');

        // copy files into .pressless
        fse.copySync(path.resolve(path.dirname(__dirname),'./src/handler.js'), '.pressless/handler.js');
        fse.copySync(path.resolve(path.dirname(__dirname),'./src/handler.php'), '.pressless/handler.php');
        fse.copySync(path.resolve(path.dirname(__dirname),'./lib/aws.phar'), '.pressless/aws.phar');
        fse.copySync(path.resolve(path.dirname(__dirname),'./bin/php'), '.pressless/php');
                                                                               
        console.log('Pressless: Importing existing Wordpress site...');

        // support for Evolution (https://github.com/evolution/wordpress)
        if (isEvolution) {
            console.log('Pressless: Detected Evolution, including...');

            fse.copySync('../Evolution.php', '.pressless/Evolution.php');    
            if (fs.existsSync('../lib/ansible/group_vars/all')) {
                fse.mkdirsSync('.pressless/lib/ansible/group_vars');
                fse.copySync('../lib/ansible/group_vars/all', '.pressless/lib/ansible/group_vars/all');    
            }

            if (fs.existsSync('../composer.json') && !fs.existsSync('../vendor')) {
                console.log('Pressless: composer.json found, installing missing dependencies...');
                if (shell.which('php')) {
                    shell.cd('..');
                    shell.exec('php -r "echo file_get_contents(\'https://raw.githubusercontent.com/composer/getcomposer.org/master/web/installer\');" | php -- --quiet && php composer.phar install && rm composer.phar');
                    shell.cd(pwd);
                } else {
                    return console.log('Pressless: Unable to install composer dependencies, `php` binary not found');
                }
            }

            if (fs.existsSync('../vendor')) {
                fse.copySync('../vendor/', '.pressless/vendor');
            }

            // rename wordpress directory down into wp
            fse.moveSync('.pressless/wordpress', '.pressless/wp')
            fse.mkdirsSync('.pressless/wordpress');
            fse.moveSync('.pressless/wp', '.pressless/wordpress/wp')

            // copy all files, since we may need more for an Evolution site
            fse.copySync('./', '.pressless/wordpress/', {filter: (src, dest) => {
                // don't cyclical copy, etc
                return (src.indexOf('.pressless') >= 0 || src.indexOf('.htaccess') >= 0) ? false : true;
            }});
        } else {
            fse.copySync('index.php', '.pressless/wordpress/index.php');
            fse.copySync('wp-config.php', '.pressless/wordpress/wp-config.php');
            fse.copySync('wp-content', '.pressless/wordpress/wp-content');

            fse.copySync('./', '.pressless/wordpress/', {filter: (src, dest) => {
                // don't cyclical copy, etc
                return (src.indexOf('.pressless') >= 0 || src.indexOf('.htaccess') >= 0 || src.indexOf('wp-') === 0 || src.indexOf('.php') > 0) ? false : true;
            }});  
        }

        // update wpconfig with new database settings
        if (process.env.PRESSLESS_DB_SSL=='true') wpConfig = wpConfig.replace(/define\('DB_NAME'/, "define('MYSQL_CLIENT_FLAGS', MYSQL_CLIENT_SSL);\ndefine('DB_NAME'");
        wpConfig = wpConfig.replace(/define\('DB_NAME', '(.*?)'/, "define('DB_NAME', getenv('PRESSLESS_DB_NAME')?:'$1'");
        wpConfig = wpConfig.replace(/define\('DB_NAME', Evolution::getDbName\('(.*?)'\)/, "define('DB_NAME', getenv('PRESSLESS_DB_NAME')?:'$1'");        
        wpConfig = wpConfig.replace(/define\('DB_USER', '(.*?)'/, "define('DB_USER', getenv('PRESSLESS_DB_USER')?:'$1'");
        wpConfig = wpConfig.replace(/define\('DB_PASSWORD', '(.*?)'/, "define('DB_PASSWORD', getenv('PRESSLESS_DB_PASSWORD')?:'$1'");
        wpConfig = wpConfig.replace(/define\('DB_HOST', '(.*?)'/, "define('DB_HOST', getenv('PRESSLESS_DB_HOST')?:'$1'");
        fs.writeFileSync('.pressless/wordpress/wp-config.php', wpConfig);
        
        async.parallel([
            function(callback) {
                console.log('Pressless: Installing Jetpack plugin...');
                //fs.mkdirSync(path.join(pwd, '.pressless/wordpress/wp-content/plugins/jetpack'));
                var zipFilePath = path.join(pwd, '.pressless/wordpress/wp-content/plugins', 'jetpack.5.0.zip');
                request('https://downloads.wordpress.org/plugin/jetpack.5.0.zip')
                    .on('error', function (err) {
                        console.log('Pressless: requestZip: ', err);
                    })
                    .pipe(fs.createWriteStream(zipFilePath))
                    .on('error', function (err) {
                        console.log('Pressless: createZip: ', err);
                    })
                    .on('finish', function () {
                        var readStream = fs.createReadStream(zipFilePath),
                            writeStream = fstream.Writer(path.join(pwd, '.pressless/wordpress/wp-content/plugins'));

                        readStream
                            .pipe(unzip.Parse())
                            .on('error', function (err) {
                                console.log('Pressless: parseZip: ', err);
                            })
                            .pipe(writeStream)
                            .on('error', function (err) {
                                console.log('Pressless: unZip: ', err);
                            })
                            .on('close', function () {
                                fs.unlinkSync(zipFilePath);
                                callback(null);
                            });
                    });
            },
            function(callback) {
                console.log('Pressless: Removing login captcha plugins...');
                try { fse.removeSync('.pressless/wordpress/wp-content/plugins/login-recaptcha'); } catch (e) {}
                try { fse.removeSync('.pressless/wordpress/wp-content/plugins/wp-login-recaptcha'); } catch (e) {}
                callback(null);
            },
            function(callback) {
                console.log('Pressless: Injecting custom code...');
                const customCode = `<?php
// ensure wp url is the pressless domain                
function pressless_url() { return 'https://${domain}'; }
add_filter('pre_option_home', 'pressless_url');
add_filter('pre_option_siteurl', 'pressless_url');
// ensure we don't redirect_canonical since in order to avoid a redirect loop
function pressless_canonical($redirect_url, $requested_url = "") { return false; }
add_filter('redirect_canonical', 'pressless_canonical');
`;

                try { fs.writeFileSync('.pressless/wordpress/wp-content/db.php', customCode); } catch (e) {}
                callback(null);
            }
        ],
        // optional callback
        function(err, results) {
            if (err) {
                console.log('Pressless: erroring installing plugins: ' + err);
                // cleanup copied files
                try { fse.removeSync('lib'); } catch (e) {}
                try { fse.removeSync('vendor'); } catch (e) {}
                try { fse.removeSync('web'); } catch (e) {}
                try { fse.removeSync('wordpress'); } catch (e) {}
                try { fs.unlinkSync('Evolution.php'); } catch (e) {}
                return;
            }

            if (isEvolution) fse.moveSync('.pressless/wordpress', '.pressless/web');

            shell.cd('.pressless');
            var child = shell.exec('node_modules/.bin/serverless deploy'
                + ' --stage '+stage
                + ' --region '+region
                + (options.verbose?' --verbose:':''), {async:true});
            child.stdout.on('finish', function(data) {        
                console.log("\nPressless: Your site URL is https://" + domain);

                const slsDomainManager = new ServerlessCustomDomain({providers: awsProvider, service: {provider: {region: region}, custom: {customDomain: {domainName: domain}}}});
                slsDomainManager.initializeVariables();
                slsDomainManager.getDomain().then((data) => {
                    console.log("\nPressless: The following DNS records need to be setup:");
                    dns.resolveCname(domain, (err, addresses) => {
                        var msg = `CNAME ${domain} -> ${data.distributionDomainName}`;
                        if (addresses && addresses[0] == data.distributionDomainName) {
                            console.log(msg + ' (already created)');
                        } else if (addresses) {
                            console.log(msg + ' (currently pointing to CNAME ' + addresses[0] + ')');
                        } else {
                            dns.resolve4(domain, (err, addresses) => {
                                if (addresses) {
                                    console.log(msg + ' (currently pointing to A ' + addresses[0] + ')');
                                } else {
                                    console.log(msg);
                                }
                            });
                        }

                        dns.resolveCname(websiteBucket, (err, addresses) => {
                            var msg = `CNAME ${websiteBucket} -> s3-website-${region}.amazonaws.com`;
                            if (addresses && addresses[0] == `s3-website-${region}.amazonaws.com`) {
                                console.log(msg + ' (already created)');
                            } else if (addresses) {
                                console.log(msg + ' (currently pointing to CNAME ' + addresses[0] + ')');
                            } else {
                                dns.resolve4(websiteBucket, (err, addresses) => {
                                    if (addresses) {
                                        console.log(msg + ' (currently pointing to A ' + addresses[0] + ')');
                                    } else {
                                        console.log(msg);
                                    }
                                });
                            }

                            const alternitveWebsiteBucket = websiteBucket.indexOf('www.') === 0 ? websiteBucket.replace('www.', '') : 'www.' + websiteBucket;
                            dns.resolveCname(alternitveWebsiteBucket, (err, addresses) => {
                            var msg = `CNAME ${alternitveWebsiteBucket} -> ${websiteBucket}`;
                            if (addresses && addresses[0] == `${websiteBucket}`) {
                                console.log(msg + ' (already created)');
                            } else if (addresses) {
                                console.log(msg + ' (currently pointing to CNAME ' + addresses[0] + ')');
                            } else {
                                dns.resolve4(alternitveWebsiteBucket, (err, addresses) => {
                                    if (addresses) {
                                        console.log(msg + ' (currently pointing to A ' + addresses[0] + ')');
                                    } else {
                                        console.log(msg);
                                    }
                                });
                            }
                        });
                        });
                    });
                });

                // cleanup copied files
                try { fse.removeSync('lib'); } catch (e) {}
                try { fse.removeSync('vendor'); } catch (e) {}
                try { fse.removeSync('web'); } catch (e) {}
                try { fse.removeSync('wordpress'); } catch (e) {}
                try { fs.unlinkSync('Evolution.php'); } catch (e) {}
            });
        });
    });
}); 

program
  .command('test <stage> <request_path>')
  .description('Test the Serverless function')
  .action(function(stage, requestPath, options) {
    if (!fs.existsSync('.pressless/serverless.yml')) {
        return console.log('Pressless: You must first call "pressless setup".');
    }
 
    const domain = getDomain();
    const functionName = domain.replace(/[\.\_\']/g, '-');
    const eventData = '{"path":"' + requestPath + '","httpMethod":"GET","headers":{"Host":"' + domain + '"},"queryStringParameters":null}';
    const localMode = stage == 'local' ? stage : '';

    shell.cd('.pressless');
    shell.exec('node_modules/.bin/serverless invoke ' + localMode + ' -f ' + functionName + ' -d ' + eventData);
}); 

asciify('pressless', {font: 'larry3d', maxWidth: 75}, function (err, result) {
    result = result.toString().replace('                                                                 ', "                ---helping wordpress cost less---");
    console.log(result);
    if (process.argv.length == 2) program.outputHelp(); 
    program.parse(process.argv);
});
